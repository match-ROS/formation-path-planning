<?xml version="1.0"?>
<launch>
    <arg name="gazebo_gui" default="true"/> <!--Start without Gazebo GUI, RVIZ is enough-->

    <!--Variables for the robot0-->
    <arg name="robot0_name" value="robot0"/>
    <arg name="robot0_x_pos" default="-8.0"/>
    <arg name="robot0_y_pos" default="0.0"/>
    <arg name="robot0_yaw_rot" default="0.0"/>

    <!--Variables for the robot1-->
    <arg name="robot1_name" value="robot1"/>
    <arg name="robot1_x_pos" default="-9.0"/>
    <arg name="robot1_y_pos" default="1.0"/>
    <arg name="robot1_yaw_rot" default="0.0"/>

    <!--Variables for the robot2-->
    <arg name="robot2_name" value="robot2"/>
    <arg name="robot2_x_pos" default="-9.0"/>
    <arg name="robot2_y_pos" default="-1.0"/>
    <arg name="robot2_yaw_rot" default="0.0"/>

    <!--Constant values that cant be adjusted from outside the launch file-->
    <!--For this example only the robot0 will get an -->
    <arg name="navigation_rviz_command_args" value="-d $(find fpp_launch)/rviz/three_robot_rviz_config.rviz"/>

    <include file="$(find match_gazebo)/launch/generic_world.launch">
        <arg name="world_name" value="$(find fpp_gazebo)/worlds/fpp_test_world.world"/>
        <arg name="map_name" value="$(find fpp_gazebo)/maps/fpp_test_world.yaml"/>
        <!-- <arg name="world_name" value="$(find match_gazebo)/worlds/advanced_maze.world"/>
        <arg name="map_name" value="$(find match_gazebo)/maps/advanced_maze.yaml"/> -->
    </include>


    <node name="fpp_navigation_rviz" pkg="rviz" type="rviz" respawn="false" 
            args="$(arg navigation_rviz_command_args)" output="screen"/>
    
    <!--This node is necessary so the fpp is able to reconfigure the costmap inflation_radius-->
    <node name="dyn_reconfig_relay_node" pkg="fpp_ros" type="dyn_reconfig_relay_node" 
                  respawn="false" output="screen"/>

    <!--This node is necessary to relay all meta data info that is sent from the individual global planners
    and combines them so they are in sync-->
    <node name="meta_data_sync_node" pkg="fpp_ros" type="fpp_meta_data_sync_node.py" respawn="false" output="screen"/>

    <!--Create namespace for robot0 and start everything that belongs in the namespace inside the group-->
    <group ns="$(arg robot0_name)">
        <!--This parameter is necessary to define the name of the robot in this namespace-->
        <param name="robot_name" type="str" value="$(arg robot0_name)"/> 

        <include file="$(find mir_launch_sim)/launch/mir_200.launch">
            <arg name="model_name" value="$(arg robot0_name)"/>
            <arg name="tf_prefix" value="$(arg robot0_name)"/>
            <arg name="robot_x" value="$(arg robot0_x_pos)"/>
            <arg name="robot_y" value="$(arg robot0_y_pos)"/>
            <arg name="robot_yaw" value="$(arg robot0_yaw_rot)"/>

            <arg name="move_base_selector" value="move_base_flex"/>
            <arg name="start_move_base_simple" value="true" />
            <arg name="global_planner" default="FormationPathPlanner" />
            <arg name="global_planner_config" default="$(find fpp_launch)/config/three_triangular_robot_config/global_planner_params.yaml" />
            <arg name="local_planner" default="FormationPathController" />
            <arg name="local_planner_config" default="$(find fpp_launch)/config/three_triangular_robot_config/local_planner_params.yaml" />
        </include>

		<!--Overwrite the enabled param that defines if new obstacles should be inserted into the global costmap. -->
        <!--Because of the mobile robots detecting each other this would add obstacles where the formation is standing -->
        <param name="move_base_flex/global_costmap/obstacles/enabled" value="false"/>

		<include file="$(find fpp_launch)/launch/launch_utils/formation_costmap.launch">
            <arg name="formation_costmap_config_path" value="$(find fpp_launch)/config/three_triangular_robot_config/formation_costmap_params.yaml"/>
        </include>
    </group>

    <!--Create namespace for robot1 and start everything that belongs in the namespace inside the group-->
    <group ns="$(arg robot1_name)">
        <!--This parameter is necessary to define the name of the robot in this namespace-->
        <param name="robot_name" type="str" value="$(arg robot1_name)"/> 

        <include file="$(find mir_launch_sim)/launch/mir_200.launch">
            <arg name="model_name" value="$(arg robot1_name)"/>
            <arg name="tf_prefix" value="$(arg robot1_name)"/>
            <arg name="robot_x" value="$(arg robot1_x_pos)"/>
            <arg name="robot_y" value="$(arg robot1_y_pos)"/>
            <arg name="robot_yaw" value="$(arg robot1_yaw_rot)"/>

            <arg name="move_base_selector" value="move_base_flex"/>
            <arg name="start_move_base_simple" value="false" />
            <arg name="global_planner" default="FormationPathPlanner" />
            <arg name="global_planner_config" default="$(find fpp_launch)/config/three_triangular_robot_config/global_planner_params.yaml" />
            <arg name="local_planner" default="FormationPathController" />
            <arg name="local_planner_config" default="$(find fpp_launch)/config/three_triangular_robot_config/local_planner_params.yaml" />
        </include>

		<!--Overwrite the enabled param that defines if new obstacles should be inserted into the global costmap. -->
        <!--Because of the mobile robots detecting each other this would add obstacles where the formation is standing -->
        <param name="move_base_flex/global_costmap/obstacles/enabled" value="false"/>

        <!--If rviz should also be started for second robot, insert the start of rviz with the specified config here.-->
    </group>

    <!--Create namespace for robot2 and start everything that belongs in the namespace inside the group-->
    <group ns="$(arg robot2_name)">
        <!--This parameter is necessary to define the name of the robot in this namespace-->
        <param name="robot_name" type="str" value="$(arg robot2_name)"/> 

        <include file="$(find mir_launch_sim)/launch/mir_200.launch">
            <arg name="model_name" value="$(arg robot2_name)"/>
            <arg name="tf_prefix" value="$(arg robot2_name)"/>
            <arg name="robot_x" value="$(arg robot2_x_pos)"/>
            <arg name="robot_y" value="$(arg robot2_y_pos)"/>
            <arg name="robot_yaw" value="$(arg robot2_yaw_rot)"/>

            <arg name="move_base_selector" value="move_base_flex"/>
            <arg name="start_move_base_simple" value="false" />
            <arg name="global_planner" default="FormationPathPlanner" />
            <arg name="global_planner_config" default="$(find fpp_launch)/config/three_triangular_robot_config/global_planner_params.yaml" />
            <arg name="local_planner" default="FormationPathController" />
            <arg name="local_planner_config" default="$(find fpp_launch)/config/three_triangular_robot_config/local_planner_params.yaml" />
        </include>

        <!--Overwrite the enabled param that defines if new obstacles should be inserted into the global costmap. -->
        <!--Because of the mobile robots detecting each other this would add obstacles where the formation is standing -->
        <param name="move_base_flex/global_costmap/obstacles/enabled" value="false"/>

        <!--If rviz should also be started for second robot, insert the start of rviz with the specified config here.-->
    </group>

    <!--Record the data of the formation path planner so failures can be comprehended afterwards-->
    <!-- <include file="$(find fpp_launch)/launch/record_fpp.launch"/> -->
</launch>